---
version: "3"

tasks:
  grafana-password:
    desc: Retrieve the grafana admin password
    silent: true
    cmds:
      - kubectl -n monitoring get secret grafana-secret -ojsonpath="{.data.admin-password}" | base64 --decode && echo

  postgres-password:
    desc: Retrieve the postgres admin password
    silent: true
    cmds:
      - kubectl -n databases get secret postgres-superuser -ojsonpath="{.data.password}" | base64 --decode && echo

  why-dockerhub:
    desc: What dockerhub images are running in my cluster
    silent: true
    cmds:
      - kubectl get pods --all-namespaces -o=jsonpath="{range .items[*]}{'\n'}{range .spec.containers[*]}{.image}{'\n'}{end}{end}" | sort | uniq | grep -Ev 'quay|gcr|ghcr|ecr|us-docker' | grep -Ev 'bitnami|rook|intel|grafana' |  sed -e 's/docker\.io\///g' | sort | uniq

  list-all-images:
    desc: List all images running in the cluster
    silent: true
    cmds:
      - kubectl get pods --all-namespaces -o jsonpath="{.items[*].spec.containers[*].image}" |tr -s '[[:space:]]' '\n' | sort | uniq

  delete-failed-pods:
    desc: Deletes failed pods
    cmds:
      - kubectl delete pods --field-selector status.phase=Failed -A --ignore-not-found=true

  delete-completed-pods:
    desc: Deletes completed pods
    cmds:
      - kubectl delete pods --field-selector status.phase=Succeeded -A --ignore-not-found=true

  cleanup:
    desc: Deletes finished pods
    cmds:
      - task: delete-failed-pods
      - task: delete-completed-pods

  list-nfs-workloads:
    desc: List all deployments with NFS volumes
    silent: true
    cmds:
      - kubectl get sts,deploy -A -o=json | jq -r '[.items[] | select(.spec.template.spec.volumes[]?.nfs) |  [(.metadata.namespace|@sh), (.kind + "/" + .metadata.name|@sh) ]] | unique | flatten | .[] ' | xargs -l2 echo

  list-nfs-pods:
    desc: List all deployments with NFS volumes
    silent: true
    cmds:
      - kubectl get pods -A -o=json | jq -r '[.items[] | select(.spec.volumes[]?.nfs) |  [(.metadata.namespace|@sh), (.metadata.name|@sh) ]] | unique | flatten | .[] ' | xargs -l2 echo

  scale-nfs-workloads-down:
    desc: Scale all deployments with NFS volumes down to zero
    silent: true
    cmds:
      - kubectl get sts,deploy -A -o=json | jq -r '[.items[] | select(.spec.template.spec.volumes[]?.nfs) |  [(.metadata.namespace|@sh), (.kind + "/" + .metadata.name|@sh) ]] | unique | flatten | .[] ' | xargs -l2 kubectl scale --replicas=0 -n
      - task: :volsync:state-suspend

  scale-nfs-workloads-up:
    desc: Scale all deployments with NFS volumes to one
    silent: true
    cmds:
      - kubectl get sts,deploy -A -o=json | jq -r '[.items[] | select(.spec.template.spec.volumes[]?.nfs) |  [(.metadata.namespace|@sh), (.kind + "/" + .metadata.name|@sh) ]] | unique | flatten | .[] ' | xargs -l2 kubectl scale --replicas=1 -n
      - kubectl -n household scale deploy immich-server --replicas 2
      - kubectl -n household scale deploy immich-microservices --replicas 2
      - task: :volsync:state-resume

  rebalance:
    desc: Run the descheduler to rebalance pods
    silent: true
    cmds:
      - kubectl -n system create job rebalance-`date '+%H%M%d'` --from=cronjob/descheduler

  watch:
    desc: Watch the cluster
    aliases:
      - :watch
    interactive: true
    cmds:
      - watch -n2 "kubectl get po -A -owide | grep -v Running && echo '' && kubectl get ks -A | grep -v Applied && echo '' && kubectl get hr -A | grep -v succeeded"

  shutdown:
    desc: Prepare for full shutdown
    # silent: true
    cmds:
      - task: scale-nfs-workloads-down
      - task: volysync:state-resume
      - task: volsync:backup-everything
      - task: volysync:state-suspend
      - |
        kubectl get cronjobs --all-namespaces --no-headers | while read -r namespace name schedule suspend active last_schedule age; do

        if [[ "$(echo "$suspend" | tr '[:upper:]' '[:lower:]')" == "true" ]]; then
          echo "INFO: Skipping suspended CronJob: $namespace/$name"
          continue
        fi

        job_name="${name}-preshutdown-$(date +%s)-${RANDOM}"
        job_name=$(echo "${job_name:0:63}" | sed 's/[^a-zA-Z0-9]$//')

        echo "INFO: Triggering $namespace/$name as $job_name..."
        # Execute the command
        kubectl create job "$job_name" --from=cronjob/"$name" -n "$namespace"

        sleep 5

        done
        echo "INFO: Finished attempting to trigger CronJobs."
      - task: etcd:backup
