---
version: "3"

tasks:
  rook-ceph-toolbox:
    desc: Exec into the Rook Ceph toolbox
    cmds:
      - kubectl -n storage exec -it $(kubectl -n storage get pod -l "app=rook-ceph-tools" -o jsonpath='{.items[0].metadata.name}') -- bash
    silent: true

  k10-password:
    desc: Retrieve the grafana admin password
    silent: true
    cmds:
      - kubectl -n backups get secret $(kubectl -n backups get serviceaccount k10-k10 -o jsonpath="{.secrets[0].name}") -ojsonpath="{.data.token}" | base64 --decode && echo

  rook-password:
    desc: Retrieve the rook-ceph password
    silent: true
    cmds:
      - kubectl -n storage get secret rook-ceph-dashboard-password -o jsonpath="{['data']['password']}" | base64 --decode && echo

  grafana-password:
    desc: Retrieve the grafana admin password
    silent: true
    cmds:
      - kubectl -n monitoring get secret kube-prometheus-stack-grafana -ojsonpath="{.data.admin-password}" | base64 --decode && echo

  why-dockerhub:
    desc: What dockerhub images are running in my cluster
    silent: true
    cmds:
      - kubectl get pods --all-namespaces -o=jsonpath="{range .items[*]}{'\n'}{range .spec.containers[*]}{.image}{'\n'}{end}{end}" | sort | uniq | grep -Ev 'quay|gcr|ghcr|ecr|us-docker' | grep -Ev 'bitnami|rook|intel|grafana' |  sed -e 's/docker\.io\///g' | sort | uniq

  debug-volume:
    desc: Attach a volume to a container for debugging, ex. VOLUME=zigbee2mqtt-config-v1 NAMESPACE=home task debug-volume
    interactive: true
    silent: true
    cmds:
      - |
        kubectl run debug-{{.VOLUME}} -n {{.NAMESPACE}} -i --tty --rm --image=null --overrides='
          {
            "spec": {
              "containers": [
                {
                  "name": "debug",
                  "image": "docker.io/library/alpine:3.15",
                  "command": [
                    "/bin/sh"
                  ],
                  "stdin": true,
                  "stdinOnce": true,
                  "tty": true,
                  "lifecycle": {
                    "postStart": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-c",
                          "apk add --no-cache curl vim rsync &"
                        ]
                      }
                    }
                  },
                  "volumeMounts": [
                    {
                      "name": "backups",
                      "mountPath": "/mnt/backups/"
                    },
                    {
                      "name": "debug-volume",
                      "mountPath": "/mnt/volume/"
                    }
                  ]
                }
              ],
              "volumes": [
                {
                  "name": "backups",
                  "nfs": {
                    "server": "{{.NAS_ADDRESS}}",
                    "path": "/volume1/k8s-storage/backups"
                  }
                },
                {
                  "name": "debug-volume",
                  "persistentVolumeClaim": {
                    "claimName": "{{.VOLUME}}"
                  }
                }
              ],
              "restartPolicy": "Never"
            }
          }'

  debug-node:
    desc: Create a privileged container on a node for debugging, ex. NODE=anvil task debug-node
    interactive: true
    silent: true
    cmds:
      - kubectl get node -owide '{{.CLI_ARGS}}' || (echo 'Node {{.CLI_ARGS}} is invalid!' && exit -1)
      - |
        kubectl run debug-{{.CLI_ARGS}} -i --tty --rm --image=null --privileged --overrides='
          {
            "spec": {
              "nodeSelector": {
                "kubernetes.io/hostname": "{{.CLI_ARGS}}"
              },
              "containers": [
                {
                  "name": "debug",
                  "image": "fedora:36",
                  "command": [
                    "/bin/bash"
                  ],
                  "stdin": true,
                  "stdinOnce": true,
                  "tty": true,
                  "lifecycle": {
                    "postStart": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-c",
                          "dnf install -y util-linux htop procps gdisk &"
                        ]
                      }
                    }
                  }
                }
              ],
              "restartPolicy": "Never"
            }
          }'

  delete-failed-pods:
    desc: Deletes failed pods
    cmds:
      - kubectl delete pods --field-selector status.phase=Failed -A --ignore-not-found=true

  backup-etcd:
    desc: Backup etcd to local file
    silent: true
    cmds:
      - |
        mkdir -p {{.PROJECT_DIR}}/talos/backups
        DATE=$(date +'%Y%m%d-%H%M%S')
        talosctl -n delta etcd snapshot {{.PROJECT_DIR}}/talos/backups/etcd-snapshot.$DATE
        ls -tr {{.PROJECT_DIR}}/talos/backups/etcd-snapshot.* | head -n -3 | xargs rm -f
