---
version: "3"

tasks:
  k10-password:
    desc: Retrieve the grafana admin password
    silent: true
    cmds:
      - kubectl -n backups get secret $(kubectl -n backups get serviceaccount k10-k10 -o jsonpath="{.secrets[0].name}") -ojsonpath="{.data.token}" | base64 --decode && echo

  grafana-password:
    desc: Retrieve the grafana admin password
    silent: true
    cmds:
      - kubectl -n monitoring get secret kube-prometheus-stack-grafana -ojsonpath="{.data.admin-password}" | base64 --decode && echo

  why-dockerhub:
    desc: What dockerhub images are running in my cluster
    silent: true
    cmds:
      - kubectl get pods --all-namespaces -o=jsonpath="{range .items[*]}{'\n'}{range .spec.containers[*]}{.image}{'\n'}{end}{end}" | sort | uniq | grep -Ev 'quay|gcr|ghcr|ecr|us-docker' | grep -Ev 'bitnami|rook|intel|grafana' |  sed -e 's/docker\.io\///g' | sort | uniq

  list-all-images:
    desc: List all images running in the cluster
    silent: true
    cmds:
      - kubectl get pods --all-namespaces -o jsonpath="{.items[*].spec.containers[*].image}" |tr -s '[[:space:]]' '\n' | sort | uniq

  update-cached-images:
    desc: Update the cached image list used by kube-fledged
    silent: true
    vars:
      IMAGE_CACHE: "{{.CLUSTER_DIR}}/apps/system/kube-fledged/imagecache.yaml"
      IMAGE_CACHE_TEMPLATE: "{{.IMAGE_CACHE}}.template"
    cmds:
      - |
        cp {{.IMAGE_CACHE}} {{.IMAGE_CACHE}}.old
        cat {{.IMAGE_CACHE_TEMPLATE}} > {{.IMAGE_CACHE}}
        (kubectl get pods --all-namespaces -o jsonpath="{.items[*].spec.containers[*].image}" |tr -s '[[:space:]]' '\n' | sort | uniq | grep -E '(apiserver|controller-manager|kube-proxy|kube-scheduler|cloudflared|external-dns|coredns|fluxcd|plex|pihole|kyverno|flannel|ceph|speaker|traefik|vaultwarden|unifi)' | sed 's/^/        - /') >> {{.IMAGE_CACHE}}
      - dyff between --omit-header {{.IMAGE_CACHE}}.old {{.IMAGE_CACHE}}
      - rm "{{.IMAGE_CACHE}}.old"

  delete-failed-pods:
    desc: Deletes failed pods
    cmds:
      - kubectl delete pods --field-selector status.phase=Failed -A --ignore-not-found=true

  delete-completed-pods:
    desc: Deletes completed pods
    cmds:
      - kubectl delete pods --field-selector status.phase=Succeeded -A --ignore-not-found=true

  cleanup:
    desc: Deletes finished pods
    cmds:
      - task: delete-failed-pods
      - task: delete-completed-pods

  list-nfs-deployments:
    desc: List all deployments with NFS volumes
    silent: true
    cmds:
      - kubectl get deploy -A -o=json | jq -r '[.items[] | select(.spec.template.spec.volumes[]?.nfs) |  [(.metadata.namespace|@sh), (.metadata.name|@sh) ]] | unique | flatten | .[] ' | xargs -l2 echo

  list-nfs-pods:
    desc: List all deployments with NFS volumes
    silent: true
    cmds:
      - kubectl get pods -A -o=json | jq -r '[.items[] | select(.spec.volumes[]?.nfs) |  [(.metadata.namespace|@sh), (.metadata.name|@sh) ]] | unique | flatten | .[] ' | xargs -l2 echo

  scale-nfs-deployments-down:
    desc: Scale all deployments with NFS volumes down to zero
    silent: true
    cmds:
      - kubectl get deploy -A -o=json | jq -r '[.items[] | select(.spec.template.spec.volumes[]?.nfs) |  [(.metadata.namespace|@sh), (.metadata.name|@sh) ]] | unique | flatten | .[] ' | xargs -l2 kubectl scale deployments --replicas=0 -n

  scale-nfs-deployments-up:
    desc: Scale all deployments with NFS volumes to one
    silent: true
    cmds:
      - kubectl get deploy -A -o=json | jq -r '[.items[] | select(.spec.template.spec.volumes[]?.nfs) |  [(.metadata.namespace|@sh), (.metadata.name|@sh) ]] | unique | flatten | .[] ' | xargs -l2 kubectl scale deployments --replicas=1 -n

  rebalance:
    desc: Run the descheduler to rebalance pods
    silent: true
    cmds:
      - kubectl -n system create job rebalance-`date '+%H%M%d'` --from=cronjob/descheduler
