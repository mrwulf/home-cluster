---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

x-task-vars: &task-vars
  app: '{{ .app }}'
  dest: '{{ .dest }}'
  controller: '{{ .controller }}'
  ns: '{{ .ns }}'
  claim: '{{ .claim }}'
  ts: '{{ .ts }}'
  ks: '{{ .ks }}'
  previous: '{{ .previous }}'
  restoreAsOf: '{{ .restoreAsOf }}'

vars:
  destinationTemplate: "{{ .ROOT_DIR }}/.taskfiles/volsync/templates/ReplicationDestination.tmpl.yaml"
  wipeJobTemplate: "{{ .ROOT_DIR }}/.taskfiles/volsync/templates/WipeJob.tmpl.yaml"
  waitForJobScript: "{{ .ROOT_DIR }}/.taskfiles/volsync/scripts/wait-for-job.sh"
  listJobTemplate: "{{ .ROOT_DIR }}/.taskfiles/volsync/templates/ListJob.tmpl.yaml"
  unlockJobTemplate: "{{ .ROOT_DIR }}/.taskfiles/volsync/templates/UnlockJob.tmpl.yaml"
  ts: '{{ now | date "150405" }}'
  OS:
    sh: "uname -s | tr '[:upper:]' '[:lower:]'"
  realpath: '{{if eq .OS "darwin"}}g{{end}}realpath'

tasks:

  relpath:
    desc: Calculate relative path from one file to another
    summary: ...
    dir: "{{ .ROOT_DIR }}"
    cmd: echo $({{ .realpath }} --relative-to=$(dirname "{{ .start }}") "{{ .end }}")
    requires:
      vars: ["start"]
    vars:
      # start:
      end: '{{ .end | default "./cluster/templates/volsync/primary" }}'
    preconditions:
      - { msg: "Start file not found", sh: "test -f {{ .start }}" }
      - { msg: "End file not found", sh: "test -d {{ .end }}" }

  # --------------------------------------------------------------------------
  enroll:
    desc: Enroll an app in volsync (app=plex), set the template to primary after first backup is complete
    silent: true
    vars:
      app: '{{ or .app (fail "`app` is required") }}'
      app_ks:
        sh: "find {{ .CLUSTER_DIR }} -type f -name \"*.yaml\" -o -name \"*.yml\" | while read file; do yq '.metadata.name' \"$file\" | grep -qx \"{{ .app }}\" && echo \"$file\" && break; done"
      # Templates must have all asterisks in single quotes! Make sure all vars are passed in to ENV of this task!
      secretTemplate: "{{ .ROOT_DIR }}/cluster/templates/volsync/primary/nfs/secret.yaml"
      sourceTemplate: "{{ .ROOT_DIR }}/cluster/templates/volsync/primary/nfs/replicationsource.yaml"
      ns:
        sh: "yq '.spec.targetNamespace | explode(.)' {{ .app_ks }}"
    env:
      APP:
        sh: "yq '.spec.postBuild.substitute.APP | explode(.)' {{ .app_ks }}"
      VOLSYNC_CLAIM:
        sh: "yq '.spec.postBuild.substitute.VOLSYNC_CLAIM | explode(.)' {{ .app_ks }}"
      VOLSYNC_CAPACITY:
        sh: "yq '.spec.postBuild.substitute.VOLSYNC_CAPACITY | explode(.)' {{ .app_ks }}"
      VOLSYNC_START_MINUTE:
        sh: "yq '.spec.postBuild.substitute.VOLSYNC_START_MINUTE | explode(.)' {{ .app_ks }}"
      APP_UID:
        sh: "yq '.spec.postBuild.substitute.APP_UID | explode(.)' {{ .app_ks }}"
      APP_GID:
        sh: "yq '.spec.postBuild.substitute.APP_GID | explode(.)' {{ .app_ks }}"
      SECRET_RESTIC_PWD:
        sh: "sops --decrypt {{ .CLUSTER_DIR }}/base/cluster-secrets.sops.yaml | yq '.stringData.SECRET_RESTIC_PWD'"
    preconditions:
      - sh: bash -c 'eval "echo \"$(envsubst < <(cat {{ .secretTemplate }}))\""' | yq '.' | kubectl -n {{ .ns }} apply -f - --dry-run
        msg: "Secret can't be created, check the template: {{ .secretTemplate }}"
      - sh: bash -c 'eval "echo \"$(envsubst < <(cat {{ .sourceTemplate }}))\""' | yq '.' | kubectl -n {{ .ns }} apply -f - --dry-run
        msg: "ReplicationSource can't be created, check the template: {{ .sourceTemplate }}"
    cmds:
      - |
        # Template needs to have all asterisks in single quotes!
        bash -c 'eval "echo \"$(envsubst < <(cat {{ .secretTemplate }}))\""' | yq '.' | kubectl -n {{ .ns }} apply -f -
        bash -c 'eval "echo \"$(envsubst < <(cat {{ .sourceTemplate }}))\""' | yq '.' | kubectl -n {{ .ns }} apply -f -

  # --------------------------------------------------------------------------
  toolbox:
    desc: Toolbox with restic for a given ReplicationSource (ex. task volsync:toolbox app=plex [ns=default] dest=nfs )
    preconditions:
      - sh: "kubectl -n {{ .ns }} get secret {{ .app }}-volsync-{{ .dest }}"
        msg: "Missing Secret - check the app, dest & namespace: {{ .app }}-volsync-{{ .dest }}"
    interactive: true
    silent: true
    vars:
      # VOLUME: "{{.CLI_ARGS}}"
      NAS_ADDRESS:
        sh: "sops --decrypt cluster/base/cluster-secrets.sops.yaml | yq '.stringData.CORE_NFS_SERVER'"
      NAS_PATH:
        sh: "sops --decrypt cluster/base/cluster-secrets.sops.yaml | yq '.stringData.NFS_VOLSYNC_PATH'"
      app: '{{ or .app (fail "ReplicationSource `app` is required") }}'
      ns: '{{ .ns | default "default" }}'
      dest: '{{ or .dest (fail "ReplicationSource `dest` is required") }}'
      SECRETREF: '{{ .app }}-volsync-{{ .dest }}'
    cmds:
      - |
        kubectl run toolbox-volsync-{{ .app }}-{{ .ts }} -n {{.ns}} -it --rm --image=null --overrides='
          {
            "spec": {
              "containers": [
                {
                  "name": "debug",
                  "image": "docker.io/library/alpine:latest",
                  "command": [
                    "/bin/sh"
                  ],
                  "envFrom": [
                    {"secretRef": {"name": "{{.SECRETREF}}" }}
                  ],
                  "stdin": true,
                  "stdinOnce": true,
                  "tty": true,
                  "lifecycle": {
                    "postStart": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-c",
                          "apk add --no-cache restic bash &"
                        ]
                      }
                    }
                  },
                  "volumeMounts": [
                    {
                      "name": "repository",
                      "mountPath": "/repository"
                    }
                  ]
                }
              ],
              "volumes": [
                {
                  "name": "repository",
                  "nfs": {
                    "server": "{{.NAS_ADDRESS}}",
                    "path": "{{.NAS_PATH}}"
                  }
                }
              ],
              "restartPolicy": "Never"
            }
          }'

  # --------------------------------------------------------------------------
  list:
    desc: List all snapshots taken by restic for a given ReplicationSource (ex. task volsync:list app=plex [ns=default] dest=nfs)
    silent: true
    cmds:
      - envsubst < <(cat {{ .listJobTemplate }}) | kubectl apply -f -
      - bash {{ .waitForJobScript }} list-{{ .app }}-{{ .ts }} {{ .ns }}
      - kubectl -n {{ .ns }} wait job/list-{{ .app }}-{{ .ts }} --for condition=complete --timeout=1m
      - kubectl -n {{ .ns }} logs job/list-{{ .app }}-{{ .ts }} --container list
      - kubectl -n {{ .ns }} delete job list-{{ .app }}-{{ .ts }}
    vars:
      app: '{{ or .app (fail "ReplicationSource `app` is required") }}'
      ns: '{{ .ns | default "default" }}'
      dest: '{{ or .dest (fail "ReplicationSource `dest` is required") }}'
    env: *task-vars
    preconditions:
      - sh: test -f {{ .waitForJobScript }}
      - sh: test -f {{ .listJobTemplate }}
      - sh: "kubectl -n {{ .ns }} get secret {{ .app }}-volsync-{{ .dest }}"
        msg: "Missing Secret - check the app, dest & namespace: {{ .app }}-volsync-{{ .dest }}"

  cleanup:
    desc: Delete volume populator PVCs in all namespaces
    cmds:
      - for: { var: dest }
        cmd: |
          {{- $items := (split "/" .ITEM) }}
          kubectl {{.context}} delete pvc -n {{ $items._0 }} {{ $items._1 }}
      - for: { var: cache }
        cmd: |
          {{- $items := (split "/" .ITEM) }}
          kubectl {{.context}} delete pvc -n {{ $items._0 }} {{ $items._1 }}
      - for: { var: snaps }
        cmd: |
          {{- $items := (split "/" .ITEM) }}
          kubectl {{.context}} delete volumesnapshot -n {{ $items._0 }} {{ $items._1 }}
    env: *task-vars
    vars:
      dest:
        sh: kubectl {{.cluster}} get pvc --all-namespaces --no-headers | grep -E "volsync-.*-dest" | awk '{print $1 "/" $2}'
      cache:
        sh: kubectl {{.context}} get pvc --all-namespaces --no-headers | grep -E "volsync-.*-cache" | awk '{print $1 "/" $2}'
      snaps:
        sh: kubectl {{.context}} get volumesnapshot --all-namespaces --no-headers | grep -E "volsync-.*-dest-.*" | awk '{print $1 "/" $2}'
      context: "{{ if .cluster }}--context {{.cluster}}{{ end }}"

  unlock:
    desc: Unlocks restic repository for a given ReplicationSource (ex. task volsync:unlock app=plex dest=nfs [ns=default])
    silent: true
    cmds:
      - envsubst < <(cat {{ .unlockJobTemplate }}) | kubectl apply -f -
      - bash {{ .waitForJobScript }} unlock-{{ .app }}-{{ .ts }} {{ .ns }}
      - kubectl -n {{ .ns }} wait job/unlock-{{ .app }}-{{ .ts }} --for condition=complete --timeout=1m
      - kubectl -n {{ .ns }} logs job/unlock-{{ .app }}-{{ .ts }} --container unlock
      - kubectl -n {{ .ns }} delete job unlock-{{ .app }}-{{ .ts }}
    vars:
      app: '{{ or .app (fail "ReplicationSource `app` is required") }}'
      ns: '{{ .ns | default "default" }}'
      dest: '{{ or .dest (fail "ReplicationSource `dest` is required") }}'
    env: *task-vars
    preconditions:
      - sh: test -f {{ .waitForJobScript }}
      - sh: test -f {{ .unlockJobTemplate }}
      - sh: "kubectl -n {{ .ns }} get secret {{ .app }}-volsync-{{ .dest }}"
        msg: Missing Secret - check the app, dest & namespace

  # To run backup jobs in parallel for all replicationsources:
  #  - kubectl get replicationsources --all-namespaces --no-headers | awk '{print $2, $1}' | xargs --max-procs=4 -l bash -c 'task volsync:snapshot app=$0 ns=$1'
  #
  snapshot:
    desc: Trigger a Restic ReplicationSource snapshot (ex. task volsync:snapshot app=plex dest=nfs [ns=default])
    cmds:
      - kubectl -n {{ .ns }} patch replicationsources {{ .rs }} --type merge -p '{"spec":{"trigger":{"manual":"{{ .ts }}"}}}'
      - bash {{ .waitForJobScript }} volsync-src-{{ .rs }} {{ .ns }}
      - kubectl -n {{ .ns }} wait job/volsync-src-{{ .rs }} --for condition=complete --timeout=120m
      # TODO: Find a way to output logs
      # Error from server (NotFound): jobs.batch "volsync-src-zzztest" not found
      # - kubectl -n {{ .ns }} logs job/volsync-src-{{ .app }}
      - kubectl -n {{ .ns }} patch replicationsources {{ .rs }} --type merge -p '{"spec":{"trigger":{"manual":null}}}'
    vars:
      app: '{{ or .app (fail "ReplicationSource `app` is required") }}'
      ns: '{{ .ns | default "default" }}'
      dest: '{{ or .dest (fail "ReplicationSource `dest` is required") }}'
      rs: '{{ .app }}-{{ .dest }}'
    env: *task-vars
    preconditions:
      - sh: test -f {{ .waitForJobScript }}
      - sh: kubectl -n {{ .ns }} get replicationsources {{ .rs }}
        msg: "ReplicationSource '{{ .app }}' not found in namespace '{{ .ns }}'"
      - sh: "kubectl -n {{ .ns }} get secret {{ .app }}-volsync-{{ .dest }}"
        msg: Missing Secret - check the app, dest & namespace

  # To run restore jobs in parallel for all replicationdestinations:
  #   - kubectl get replicationsources --all-namespaces --no-headers | awk '{print $2, $1}' | xargs --max-procs=2 -l bash -c 'task volsync:restore app=$0 ns=$1'
  #
  restore:
    desc: Trigger a Restic ReplicationSource restore (ex. task volsync:restore app=plex [ns=default])
    cmds:
      - task: suspend-task
        vars: *task-vars
      - task: wipe-task
        vars: *task-vars
      - task: restore-task
        vars: *task-vars
      - task: resume-task
        vars: *task-vars
    vars:
      app: '{{ or .app (fail "Variable `app` is required") }}'
      ns: '{{ .ns | default "default" }}'
      dest: '{{ or .dest (fail "ReplicationSource `dest` is required") }}'
      rs: '{{ .app }}-{{ .dest }}'
      # 1) Query to find the Flux Kustomization associated with the ReplicationSource (app)
      ks:
        sh: |
          kubectl -n {{ .ns }} get replicationsource {{ .rs }} \
            -o jsonpath="{.metadata.labels.kustomize\.toolkit\.fluxcd\.io/name}"
      # 2) Query to find the Claim associated with the ReplicationSource (app)
      claim:
        sh: |
          kubectl -n {{ .ns }} get replicationsource {{ .rs }} \
            -o jsonpath="{.spec.sourcePVC}"
      # 3) Query to find the controller associated with the PersistentVolumeClaim (claim)
      controller:
        sh: |
          app=$(kubectl -n {{ .ns }} get persistentvolumeclaim {{ .claim }} -o jsonpath="{.metadata.labels.app\.kubernetes\.io/name}")
          if kubectl -n {{ .ns }} get deployment.apps/$app >/dev/null 2>&1 ; then
            echo "deployment.apps/$app"
          else
            echo "statefulset.apps/$app"
          fi
      previous: "{{ .previous | default 2 }}"
      restoreAsOf: '{{ .restoreAsOf | default "2024-04-12T00:00:00-00:00" }}'
    env: *task-vars
    preconditions:
      - sh: test -f {{ .wipeJobTemplate }}
      - sh: test -f {{ .destinationTemplate }}
      - sh: test -f {{ .waitForJobScript }}
      - sh: "kubectl -n {{ .ns }} get secret {{ .app }}-volsync-${dest}"
        msg: Missing Secret - check the app & namespace

  # Suspend the Flux ks and hr
  suspend-task:
    internal: true
    cmds:
      - flux -n flux-system suspend kustomization {{ .ks }}
      - flux -n {{ .ns }} suspend helmrelease {{ .app }}
      - kubectl -n {{ .ns }} scale {{ .controller }} --replicas 0
      - kubectl -n {{ .ns }} wait pod --for delete --selector="app.kubernetes.io/name={{ .app }}" --timeout=2m
    env: *task-vars
    preconditions:
      - sh: "kubectl -n {{ .ns }} get secret {{ .app }}-volsync-{{ .dest }}"
        msg: Missing Secret - check the app & namespace

  # Wipe the PVC of all data
  wipe-task:
    internal: true
    cmds:
      - envsubst < <(cat {{ .wipeJobTemplate }}) | kubectl apply -f -
      - bash {{ .waitForJobScript }} wipe-{{ .app }}-{{ .claim }}-{{ .ts }} {{ .ns }}
      - kubectl -n {{ .ns }} wait job/wipe-{{ .app }}-{{ .claim }}-{{ .ts }} --for condition=complete --timeout=120m
      - kubectl -n {{ .ns }} logs job/wipe-{{ .app }}-{{ .claim }}-{{ .ts }} --container wipe
      - kubectl -n {{ .ns }} delete job wipe-{{ .app }}-{{ .claim }}-{{ .ts }}
    env: *task-vars
    preconditions:
      - sh: "kubectl -n {{ .ns }} get secret {{ .app }}-volsync-{{ .dest }}"
        msg: Missing Secret - check the app & namespace

  # Create VolSync replicationdestination CR to restore data
  restore-task:
    internal: true
    cmds:
      - |
        envsubst < <(cat {{ .destinationTemplate }}) | kubectl apply -f -
      - bash {{ .waitForJobScript }} volsync-dst-{{ .app }}-{{ .claim }}-{{ .ts }} {{ .ns }}
      - kubectl -n {{ .ns }} wait job/volsync-dst-{{ .app }}-{{ .claim }}-{{ .ts }} --for condition=complete --timeout=120m
      - kubectl -n {{ .ns }} delete replicationdestination {{ .app }}-{{ .claim }}-{{ .ts }}
    env: *task-vars
    preconditions:
      - sh: "kubectl -n {{ .ns }} get secret {{ .app }}-volsync-{{ .dest }}"
        msg: Missing Secret - check the app & namespace

  # Resume Flux ks and hr
  resume-task:
    internal: true
    cmds:
      - flux -n {{ .ns }} resume helmrelease {{ .app }}
      - flux -n flux-system resume kustomization {{ .ks }}
    env: *task-vars
    preconditions:
      - sh: "kubectl -n {{ .ns }} get secret {{ .app }}-volsync-{{ .dest }}"
        msg: Missing Secret - check the app & namespace
