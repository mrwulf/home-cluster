---
version: "3"

vars:
  CLUSTER_NAME:
    sh: yq '.clusterName' talos/talconfig.yaml
  NODE_LIST:
    sh: yq '.nodes[].hostname' talos/talconfig.yaml | tr '\n' ',' | head -c -1
  ONE_NODE:
    sh: echo '{{.NODE_LIST}}' | tr ',' '\n' | shuf | head -n1
  MASTER_LIST:
    sh: yq '.nodes[] | select(.controlPlane==true) | .hostname ' talos/talconfig.yaml | tr '\n' ',' | head -c -1
  ONE_MASTER:
    sh: echo '{{.MASTER_LIST}}' | tr ',' '\n' | shuf | head -n1

tasks:
  list:
    desc: List all the hosts
    silent: true
    cmds:
      - |
        echo {{.NODE_LIST}}

  list-masters:
    desc: List all the masters
    silent: true
    cmds:
      - |
        echo {{.MASTER_LIST}}

  get-a-master:
    silent: true
    cmds:
      - echo {{.ONE_MASTER}}

  get-a-node:
    silent: true
    cmds:
      - echo {{.ONE_NODE}}

  backup-etcd:
    desc: Backup etcd to local file
    silent: true
    cmds:
      - |
        mkdir -p {{.PROJECT_DIR}}/talos/backups
        DATE=$(date +'%Y%m%d-%H%M%S')
        talosctl -n {{.ONE_MASTER}} etcd snapshot {{.PROJECT_DIR}}/talos/backups/etcd-snapshot.$DATE
        ls -tr {{.PROJECT_DIR}}/talos/backups/etcd-snapshot.* | head -n -3 | xargs rm -f

  debug-node:
    desc: Create a privileged container on a node for debugging, ex. task talos:debug-node -- <node-name>
    interactive: true
    silent: true
    vars:
      NODE: '{{.CLI_ARGS | default .ONE_MASTER}}'
    cmds:
      - kubectl debug node/{{.NODE}} -it --image=fedora:36 -- bash

  dashboard:
    desc: Show the Talos dashboard with all the hosts
    silent: true
    cmds:
      - |
        talosctl -n {{.NODE_LIST}} dashboard

  ctl-all:
    desc: Talosctl with all the hosts
    silent: true
    cmds:
      - |
        talosctl -n {{.NODE_LIST}} {{.CLI_ARGS | default "--help"}}

  ctl-one:
    desc: Talosctl with a single host
    silent: true
    cmds:
      - |
        talosctl -n {{.ONE_MASTER}} {{.CLI_ARGS | default "--help"}}

  theila:
    desc: Show the Theila web-ui dashboard with all the hosts
    silent: true
    cmds:
      - |
        docker pull ghcr.io/siderolabs/theila:latest
        xdg-open http://localhost:8080/
        docker run --rm -it --volume ${HOME}/.talos/config:/opt/talosconfig:ro --env TALOSCONFIG=/opt/talosconfig --publish 8080:8080 ghcr.io/siderolabs/theila:latest --address 0.0.0.0

  generate-secrets:
    dir: "{{.PROJECT_DIR}}"
    vars:
      FILENAME: "{{.PROJECT_DIR}}/talos/talsecret.sops.yaml"
    cmds:
      - talhelper gensecret > {{.FILENAME}}
      - sops -e -i {{.FILENAME}}
    preconditions:
      - sh: "[ ! -f {{.FILENAME}} ]"
        msg: "Talos secrets already exist!"
      - sh: "[ -n $SOPS_AGE_KEY_FILE ]"
        msg: "Sops not configured yet!"

  generate-configs:
    desc: Use talhelper to regenerate individual node configs
    silent: true
    dir: "{{.PROJECT_DIR}}/talos/"
    sources:
      - "{{.PROJECT_DIR}}/talos/talconfig.yaml"
      - "{{.PROJECT_DIR}}/talos/talsecret.sops.yaml"
    generates:
      - "{{.PROJECT_DIR}}/talos/clusterconfig/*"
      - "{{.PROJECT_DIR}}/talos/clusterconfig/talosconfig"
      - "{{.PROJECT_DIR}}/talos/clusterconfig/.gitignore"
    cmds:
      - talhelper genconfig

  diff-config:
    desc: Diff config against running node config
    vars:
      NODE: '{{.CLI_ARGS | default .ONE_MASTER}}'
    cmds:
      - |
        talosctl apply-config --dry-run -n {{.NODE}} -f {{.PROJECT_DIR}}/talos/clusterconfig/{{.CLUSTER_NAME}}-{{.NODE}}.yaml

  apply-config:
    desc: Apply config against running node config
    vars:
      NODE: '{{.CLI_ARGS}}'
    preconditions:
      - sh: "[ '' -eq {{.NODE}} ]"
        msg: Node Required!
    cmds:
      - |
        talosctl apply-config -n {{.NODE}} -f {{.PROJECT_DIR}}/talos/clusterconfig/{{.CLUSTER_NAME}}-{{.NODE}}.yaml

  etcd-client:
    desc: Interactive etcd shell
    vars:
      COMMAND: '{{.COMMAND | default "bash"}}'
      NODE: '{{.CLI_ARGS | default .ONE_MASTER}}'
      NODE_IP:
        sh: ping -c1 {{.NODE}} | grep -oP 'PING.*?\(\K[^)]+'
      TEMP_DIR:
        sh: mktemp -d
      ETCDCTL_IMAGE:
        sh: talosctl images | grep etcd
    preconditions:
      - sh: '[[ "{{.MASTER_LIST}}" == *"{{.NODE}}"* ]]'
        msg: Invalid Master!
    interactive: true
    silent: true
    cmds:
      - |
        # Get the secrets
        talosctl -n {{.NODE}} cp /system/secrets/etcd {{.TEMP_DIR}}

        # Run the etcdctl container
        docker run -it --rm -v {{.TEMP_DIR}}:/etc/etcd --name etcdctl \
          -e ETCDCTL_ENDPOINTS="{{.NODE_IP}}:2379" \
          -e ETCDCTL_INSECURE_SKIP_TLS_VERIFY="true" \
          -e ETCDCTL_KEY=/etc/etcd/admin.key \
          -e ETCDCTL_CERT=/etc/etcd/admin.crt \
          {{.ETCDCTL_IMAGE}} {{.COMMAND}}

      - defer: rm -rf {{.TEMP_DIR}}

  etcd-defrag:
    desc: Defrag all etcd members
    cmds:
      - task: etcd-client
        vars:
          COMMAND: etcdctl defrag --cluster=true

  etcd-command:
    desc: Run a command in an etcd client
    cmds:
      - task: etcd-client
        vars:
          COMMAND: '{{.CLI_ARGS}}'
          CLI_ARGS: null

  upgrade:
    desc: Upgrade Talos on a single node to version in talconfig.yaml
    silent: true
    vars:
      NODE: '{{.CLI_ARGS | default .ONE_MASTER}}' # Use a master since masters should be upgraded before workers
      TARGET_VERSION:
        sh: yq '.talosVersion' talos/talconfig.yaml
      TARGET_VERSION_IMAGE: "ghcr.io/siderolabs/installer:{{.TARGET_VERSION}}"
    deps:
      - task: generate-configs
    preconditions:
      - sh: "talosctl apply-config --dry-run -n {{.NODE}} -f {{.PROJECT_DIR}}/talos/clusterconfig/{{.CLUSTER_NAME}}-{{.NODE}}.yaml | grep -q 'No changes.'"
        msg: Node config has changed - apply new config first!
    cmds:
      - |
        echo "Target Version: {{.TARGET_VERSION}}"
        echo "Target Version Image: {{.TARGET_VERSION_IMAGE}}"
        echo "Target Node: {{.NODE}}"
        talosctl upgrade -n {{.NODE}} --image {{.TARGET_VERSION_IMAGE}}
