---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: &app minio
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.7.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
  values:
    defaultPodOptions:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: *app
              topologyKey: "kubernetes.io/hostname"
    controllers:
      minio:
        strategy: RollingUpdate
        annotations:
          reloader.stakater.com/auto: "true"
        replicas: 1
        # pod:
        #   securityContext:
        #     runAsUser: 568
        #     runAsGroup: 568
        #     fsGroup: 568
        #     fsGroupChangePolicy: "OnRootMismatch"
        #     supplementalGroups:
        #       - 100
        #       - 65539
        containers:
          main:
            image:
              repository: quay.io/minio/minio
              tag: RELEASE.2025-01-20T14-49-07Z
            env:
              TZ: "${TIMEZONE}"
              MINIO_UPDATE: "off"
              MINIO_PROMETHEUS_URL: http://kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090
              MINIO_PROMETHEUS_JOB_ID: minio
              MINIO_PROMETHEUS_AUTH_TYPE: public
              MINIO_BROWSER_REDIRECT_URL: "https://minio.home.${SECRET_DOMAIN}"
              MINIO_SERVER_URL: "https://cdn.${SECRET_DOMAIN}"
            envFrom:
              - secretRef:
                  name: minio-secret
            args: ["server", "/data", "--console-address", ":9001"]
            resources:
              requests:
                memory: 100Mi
                cpu: 100m
              limits:
                memory: 2Gi
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /minio/health/live
                    port: &api-port 9000
                  initialDelaySeconds: 30
                  periodSeconds: 30
                  timeoutSeconds: 10
                  failureThreshold: 6
              readiness: *probes

    service:
      minio:
        controller: minio
        ports:
          http:
            port: &console-port 9001
          api:
            enabled: true
            port: *api-port

    # https://min.io/docs/minio/linux/reference/minio-mc-admin/mc-admin-prometheus.html
    serviceMonitor:
      main:
        serviceName: minio
        endpoints:
          - port: api
            scheme: http
            path: /minio/v2/metrics/cluster
            interval: 1m
            scrapeTimeout: 10s
            # bearerTokenSecret:
            #   name: minio-secret
            #   key: MINIO_PROMETHEUS_TOKEN

    ingress:
      minio:
        className: traefik
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-rfc1918-ips@kubernetescrd"
          hajimari.io/icon: "mdi:pail"
          hajimari.io/enable: "true"
        hosts:
          - host: &console-host "minio.home.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: minio
                  port: *console-port
        tls:
          - secretName: "wildcard-internal-${SECRET_DOMAIN/./-}-tls"
            hosts:
              - *console-host
      s3:
        className: traefik
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN:=domain}"
          hajimari.io/enable: "false"
        hosts:
          - host: &api-host "cdn.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: minio
                  port: *api-port
        tls:
          - secretName: "wildcard-${SECRET_DOMAIN/./-}-tls"
            hosts:
              - *api-host

    persistence:
      config:
        type: nfs
        server: "${CORE_NFS_SERVER:=nas0}"
        path: "/mnt/user/Objects"
        globalMounts:
          - path: /data
