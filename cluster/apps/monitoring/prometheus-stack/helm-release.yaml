---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 44.3.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  values:
    kubeEtcd:
      enabled: true
      endpoints:
        - 10.0.1.41
        - 10.0.1.42
        - 10.0.1.44
        # - 10.0.1.45
      service:
        enabled: true
        port: 2381
        targetPort: 2381
      serviceMonitor:
        scheme: http
    kubeControllerManager:
      enabled: true
      service:
        enabled: true
        selector:
          k8s-app: kube-controller-manager
      serviceMonitor:
        scheme: https
    kubeScheduler:
      enabled: true
      service:
        enabled: true
        selector:
          k8s-app: kube-scheduler
      serviceMonitor:
        scheme: https
    kubeProxy:
      enabled: true
      service:
        enabled: true
        selector:
          k8s-app: kube-proxy
      serviceMonitor:
        scheme: https
    coreDns:
      enabled: true
      service:
        enabled: true
        selector:
          k8s-app: kube-dns
    kubelet:
      enabled: true
      endpoints:
        - 10.0.1.41
        - 10.0.1.42
        - 10.0.1.44
        - 10.0.1.45
      service:
        enabled: true
        port: 10250
        targetPort: 10250
    grafana:
      adminPassword: ${GRAFANA_PASS}
      defaultDashboardsTimezone: browser
      deploymentStrategy:
        type: Recreate
      plugins:
        - grafana-piechart-panel
      dashboards:
        default:
          # Ref: https://grafana.com/grafana/dashboards/13502
          minio:
            gnetId: 13502
            revision: 19
            datasource: Prometheus
      serviceMonitor:
        enabled: true
      persistence:
        type: pvc
        enabled: true
        storageClassName: ceph-block
        accessModes:
          - ReadWriteOnce
        size: 2Gi
      ingress:
        enabled: true
        ingressClassName: traefik
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-rfc1918-ips@kubernetescrd"
          hajimari.io/enable: "true"
          hajimari.io/appName: "Grafana"
        hosts:
          - &host "grafana.home.${SECRET_DOMAIN}"
        tls:
          - secretName: "wildcard-internal-${SECRET_DOMAIN/./-}-tls"
            hosts:
              - *host
      grafana.ini:
        server:
          root_url: "https://grafana.home.${SECRET_DOMAIN}"
        analytics:
          check_for_updates: false
        security:
          allow_embedding: true
        auth:
          signout_redirect_url: "https://auth.home.${SECRET_DOMAIN}/application/o/grafana/end-session/"
          # Switch off auto_login to be able to log in as admin to solve https://github.com/grafana/grafana/issues/29211
          oauth_auto_login: false
        auth.generic_oauth:
          enabled: true
          name: "Authentik"
          client_id: "${GRAFANA_OAUTH_CLIENTID}"
          client_secret: "${GRAFANA_OAUTH_SECRET}"
          scopes: "openid profile email"
          auth_url: "https://auth.home.${SECRET_DOMAIN}/application/o/authorize/"
          token_url: "https://auth.home.${SECRET_DOMAIN}/application/o/token/"
          api_url: "https://auth.home.${SECRET_DOMAIN}/application/o/userinfo/"
          allow_sign_up: true
          role_attribute_path: "contains(groups[*], 'grafana admin') && 'Admin' || contains(groups[*], 'grafana editor') && 'Editor' || 'Viewer'"
          email_attribute_name: email
    prometheus:
      ingress:
        enabled: true
        ingressClassName: traefik
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-rfc1918-ips@kubernetescrd"
          hajimari.io/enable: "true"
          hajimari.io/appName: "Prometheus"
        hosts:
          - &host "prom.home.${SECRET_DOMAIN}"
        tls:
          - secretName: "wildcard-internal-${SECRET_DOMAIN/./-}-tls"
            hosts:
              - *host

      prometheusSpec:
        retentionSize: "35GiB"
        serviceMonitorNamespaceSelector: {}
        serviceMonitorSelectorNilUsesHelmValues: false
        serviceMonitorSelector: {}
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 40Gi
        podMonitorNamespaceSelector: {}
        podMonitorSelectorNilUsesHelmValues: false
        podMonitorSelector: {}
        ruleNamespaceSelector: {}
        ruleSelectorNilUsesHelmValues: false
        ruleSelector: {}
        additionalScrapeConfigs:
          - job_name: node-exporter
            honor_timestamps: true
            static_configs:
              - targets:
                  - "firewall.${SECRET_DOMAIN}:9100"
    alertmanager:
      ingress:
        enabled: true
        ingressClassName: traefik
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-rfc1918-ips@kubernetescrd"
          hajimari.io/enable: "true"
          hajimari.io/appName: "Alertmanager"
        hosts:
          - &host "alerts.home.${SECRET_DOMAIN}"
        tls:
          - secretName: "wildcard-internal-${SECRET_DOMAIN/./-}-tls"
            hosts:
              - *host
