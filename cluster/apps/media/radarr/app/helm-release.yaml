---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: radarr
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.7.3
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
  values:
    defaultPodOptions:
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      securityContext:
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
    controllers:
      app:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          main:
            image:
              repository: ghcr.io/home-operations/radarr
              tag: '5.23.3.9987'
            env:
              TZ: "${TIMEZONE}"
              RADARR__INSTANCE_NAME: Radarr
              RADARR__PORT: &port 7878
              RADARR__APPLICATION_URL: "https://radarr.home.${SECRET_DOMAIN}"
              RADARR__LOG_LEVEL: info
            resources:
              requests:
                cpu: 15m
                memory: 1312M
              limits:
                memory: 4655M
    service:
      app:
        controller: app
        ports:
          http:
            port: *port
    ingress:
      main:
        className: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-rfc1918-ips@kubernetescrd"
          hajimari.io/enable: "true"
          hajimari.io/group: "Media"
          hajimari.io/icon: "movie-open"
        hosts:
          - host: &host "radarr.home.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        tls:
          - secretName: "wildcard-internal-${SECRET_DOMAIN/./-}-tls"
            hosts:
              - *host

    persistence:
      config:
        existingClaim: "${VOLSYNC_CLAIM}"
      downloads:
        type: nfs
        server: "${CORE_NFS_SERVER:=nas0}"
        path: /mnt/user/k8s/media-downloaded
        globalMounts:
          - path: /downloads
      movies:
        type: nfs
        server: "${CORE_NFS_SERVER:=nas0}"
        path: /mnt/user/Movies
        globalMounts:
          - path: /Movies
      backups:
        type: nfs
        server: "${CORE_NFS_SERVER:=nas0}"
        path: "/mnt/user/backups/radarr"
        globalMounts:
          - path: /config/Backups
