---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app lidarr
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 4.3.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
  values:
    defaultPodOptions:
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      securityContext:
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
    controllers:
      lidarr:
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          init-db:
            image:
              repository: ghcr.io/home-operations/postgres-init
              tag: 17.6
            envFrom: &envFrom
              - secretRef:
                  name: lidarr-secret
        containers:
          app:
            image:
              repository: ghcr.io/home-operations/lidarr
              tag: 2.14.4.4809
            env:
              TZ: ${CONFIG_TIMEZONE}
              LIDARR__INSTANCE_NAME: Lidarr
              LIDARR__PORT: &port 8686
              LIDARR__LOG_LEVEL: info
              LIDARR__AUTHENTICATION_METHOD: External
              LIDARR__AUTHENTICATION_REQUIRED: DisabledForLocalAddresses
              LIDARR__THEME: dark
            envFrom:
              - secretRef:
                  name: lidarr-secret
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: {drop: ["ALL"]}
    service:
      app:
        controller: lidarr
        ports:
          http:
            port: 8686
    ingress:
      app:
        enabled: true
        className: traefik
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.middlewares: "networking-rfc1918-ips@kubernetescrd"
          gatus.io/enabled: "true"
        hosts:
          - host: &host "{{ .Release.Name }}.home.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        tls:
          - secretName: "wildcard-internal-${SECRET_DOMAIN/./-}-tls"
            hosts:
              - *host
    persistence:
      config:
        existingClaim: lidarr-config
      tmp:
        type: emptyDir
      logs:
        type: emptyDir
        globalMounts:
          - path: /config/logs
      media:
        type: nfs
        server: "${CORE_NFS_SERVER:=nas0}"
        path: /mnt/user/k8s/music
        globalMounts:
          - path: /media
      downloads:
        type: nfs
        server: "${CORE_NFS_SERVER:=nas0}"
        path: /mnt/user/k8s/media-downloaded
        globalMounts:
          - path: /downloads
      backup:
        type: nfs
        server: "${CORE_NFS_SERVER:=nas0}"
        path: "/mnt/user/backups/lidarr"
        globalMounts:
          - path: /config/Backups
